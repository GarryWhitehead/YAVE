project (YaveVulkanApi)

include ("${YAVE_CMAKE_INCLUDE_DIRECTORY}/library.cmake")
include ("${YAVE_CMAKE_INCLUDE_DIRECTORY}/targets.cmake")

#Â set vulkan layers env variables for XCode users - ignored if not running XCode.
set(CMAKE_XCODE_SCHEME_ENVIRONMENT VK_LAYER_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../res/vulkan/explicit_layer.d;DYLD_LIBRARY_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../lib;VK_INSTANCE_LAYERS=VK_LAYER_LUNARG_api_dump:VK_LAYER_KHRONOS_validation)
message("Validation path: ${vulkan-validationlayers_INCLUDE_DIR}")
# create a env source script for vulkan layers setup - to be ran with bash source
if (UNIX)
    set(env_source_path "${CMAKE_BINARY_DIR}/yave_env_setup.sh")
    file(WRITE ${env_source_path} "# Generated by the YAVE buildsystem. Run with bash `source` to setup the environment.\n")
    file(APPEND ${env_source_path} "export VK_LAYER_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../res/vulkan/explicit_layer.d\n")
    file(APPEND ${env_source_path} "export DYLD_LIBRARY_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../lib\n")
    file(APPEND ${env_source_path} "export VK_INSTANCE_LAYERS=VK_LAYER_LUNARG_api_dump:VK_LAYER_KHRONOS_validation\n")
elseif(WIN32)
    set(env_source_path "${CMAKE_BINARY_DIR}/yave_env_setup.ps1")
    file(WRITE ${env_source_path} "# Generated by the YAVE buildsystem. Run script in powershell to setup the environment.\n")
    file(APPEND ${env_source_path} "Write-Output \"Note: You MUST run powershell with non-adminstrative priveliges for vulkan validation env variables to work.\"\n")
    file(APPEND ${env_source_path} "$env:VK_LAYER_PATH=\"${vulkan-validationlayers_INCLUDE_DIR}\\..\\bin\"\n")
    file(APPEND ${env_source_path} "$env:VK_INSTANCE_LAYERS=\"VK_LAYER_LUNARG_api_dump;VK_LAYER_KHRONOS_validation\"\n")
    file(APPEND ${env_source_path} "$env:VK_LOADER_LAYERS_ENABLE=\"*api_dump,*validation\"\n")
endif()

# this is a bit of a hack to get the shaderc_util include headers which aren't
# installed as part of the conan package for some reason
set(shaderc_util_path 
    "${shaderc_INCLUDE_DIRS}/../../../source/source_subfolder/libshaderc_util/include/libshaderc_util"
)
file(GLOB shaderc_util_headers "${shaderc_util_path}/*.h")
file(COPY ${shaderc_util_headers} DESTINATION "${shaderc_INCLUDE_DIRS}/shaderc_util")

add_library(YaveVulkanApi STATIC)

target_sources(
    YaveVulkanApi
    PRIVATE
    src/vulkan-api/driver.cpp
    src/vulkan-api/context.cpp
    src/vulkan-api/swapchain.cpp
    src/vulkan-api/texture.cpp
    src/vulkan-api/shader.cpp
    src/vulkan-api/pipeline.cpp
    src/vulkan-api/renderpass.cpp
    src/vulkan-api/image.cpp
    src/vulkan-api/utility.cpp
    src/vulkan-api/commands.cpp
    src/vulkan-api/program_manager.cpp
    src/vulkan-api/buffer.cpp
    src/vulkan-api/common.cpp
    src/vulkan-api/resource_cache.cpp
    src/vulkan-api/framebuffer_cache.cpp
    src/vulkan-api/pipeline_cache.cpp
    src/vulkan-api/sampler_cache.cpp
    src/vulkan-api/garbage_collector.cpp

    src/vulkan-api/driver.h
    src/vulkan-api/context.h
    src/vulkan-api/swapchain.h
    src/vulkan-api/texture.h
    src/vulkan-api/shader.h
    src/vulkan-api/pipeline.h
    src/vulkan-api/renderpass.h
    src/vulkan-api/image.h
    src/vulkan-api/utility.h
    src/vulkan-api/commands.h
    src/vulkan-api/program_manager.h
    src/vulkan-api/buffer.h
    src/vulkan-api/common.h
    src/vulkan-api/resource_cache.h
    src/vulkan-api/framebuffer_cache.h
    src/vulkan-api/pipeline_cache.h
    src/vulkan-api/sampler_cache.h
    src/vulkan-api/garbage_collector.h
)

target_sources(
    YaveVulkanApi
    PUBLIC
    src/backend/convert_to_vk.cpp
    src/backend/enums.h
    src/backend/convert_to_vk.h
    src/backend/convert_to_yave.cpp
    src/backend/convert_to_yave.h
)

target_include_directories(
    YaveVulkanApi
    PUBLIC
    "${CMAKE_CURRENT_SOURCE_DIR}/src"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/YaveVulkanApi"
    PRIVATE
    ${VulkanHeaders_INCLUDE_DIRS}
)

target_compile_definitions(
    YaveVulkanApi
    PRIVATE
    YAVE_SHADER_DIRECTORY="${YAVE_SHADER_DIRECTORY}"
    VULKAN_VALIDATION_DEBUG=${WITH_VALIDATION_LAYERS}
    YAVE_VERBOSE_OUTPUT=${VERBOSE_OUTPUT}
)

target_link_libraries(
    YaveVulkanApi
    PUBLIC
    shaderc::shaderc
    YaveUtility
    mathfu::mathfu
    spdlog::spdlog
    vulkan-validationlayers::vulkan-validationlayers
    spirv-cross::spirv-cross
    vulkan-memory-allocator::vulkan-memory-allocator
    Vulkan::Vulkan
    YaveModelParser
)

# add common compiler flags
yave_add_compiler_flags(TARGET YaveVulkanApi)

# group source and header files
yave_source_group(
    TARGET YaveVulkanApi
    ROOT_DIR "${YAVE_ROOT_DIRECTORY}/vulkan-api/src/"
)

if (WIN32)
    set_property(
        TARGET 
        YaveVulkanApi 
        PROPERTY VS_DEBUGGER_ENVIRONMENT 
        VK_LAYER_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../bin\nVK_LOADER_LAYERS_ENABLE=*api_dump,*validation
    )
endif()