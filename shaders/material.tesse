#if defined(HAS_UV_ATTR_INPUT)
layout (location = 0) in vec2 inUv[];
#endif
#if defined(HAS_NORMAL_ATTR_INPUT)
layout (location = 1) in vec3 inNorm[];
#endif
#if defined(HAS_COLOUR_ATTR_INPUT)
layout(location = 2) in vec4 inColour[];
#endif
layout (location = 3) in vec3 inPos[];

#if defined(HAS_UV_ATTR_INPUT)
layout (location = 0) out vec2 outUv;
#endif
#if defined(HAS_NORMAL_ATTR_INPUT)
layout (location = 1) out vec3 outNorm;
#endif
#if defined(HAS_COLOUR_ATTR_INPUT)
layout (location = 2) out vec4 outColour;
#endif
layout (location = 3) out vec3 outPos;

struct TessEvalInput
{
#if defined(HAS_UV_ATTR_INPUT)
    vec2 uv;
#endif
#if defined(HAS_NORMAL_ATTR_INPUT)
    vec3 norm;
#endif
#if defined(HAS_COLOUR_ATTR_INPUT)
    vec4 colour;
#endif
    vec4 pos;
};

layout (quads, equal_spacing, cw) in;

void main()
{
    TessEvalInput tessInput;

#if defined(HAS_UV_ATTR_INPUT)
    // interpolate uv
	vec2 u1 = mix(inUv[0], inUv[1], gl_TessCoord.x);
	vec2 u2 = mix(inUv[3], inUv[2], gl_TessCoord.x);
	tessInput.uv = mix(u1, u2, gl_TessCoord.y);
#endif
#if defined(HAS_NORMAL_ATTR_INPUT)
	// interpolate normals
	vec3 n1 = mix(inNorm[0], inNorm[1], gl_TessCoord.x);
	vec3 n2 = mix(inNorm[3], inNorm[2], gl_TessCoord.x);
	tessInput.norm = mix(n1, n2, gl_TessCoord.y);
#endif
#if defined(HAS_COLOUR_ATTR_INPUT)

#endif
	// interpolated positions from vertex
	vec4 p1 = mix(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
	vec4 p2 = mix(gl_in[3].gl_Position, gl_in[2].gl_Position, gl_TessCoord.x);
	tessInput.pos = mix(p1, p2, gl_TessCoord.y);

    materialTessEval(tessInput);
}