#define GROUP_SIZE 256
#define TAU 1.1

shared uint histogramShared[GROUP_SIZE];

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() 
{
  uint countForThisBin = input_ssbo.histogram[gl_LocalInvocationIndex];
  histogramShared[gl_LocalInvocationIndex] = countForThisBin * gl_LocalInvocationIndex;

  barrier();

  //input_ssbo.histogram[gl_LocalInvocationIndex] = 0;

  for (uint sampleIdx = (GROUP_SIZE >> 1); sampleIdx > 0; sampleIdx >>= 1) 
  {
    if (uint(gl_LocalInvocationIndex) < sampleIdx) 
    {
      histogramShared[gl_LocalInvocationIndex] += histogramShared[gl_LocalInvocationIndex + sampleIdx];
    }

    barrier();
  }

  if (gl_LocalInvocationIndex == 0) 
  {
    float weightedLogAverage = (histogramShared[0] / max(compute_ubo.numPixels - float(countForThisBin), 1.0)) - 1.0;
    float weightedAvgLum = exp2(((weightedLogAverage / 254.0) * compute_ubo.invLuminanceRange) + compute_ubo.minLuminanceLog);

    // use the values from the last frame to prevent sudden shifts in luminance
    float lumLastFrame = imageLoad(ColourSampler, ivec2(0, 0)).r;
    float adaptedLum = lumLastFrame + (weightedAvgLum - lumLastFrame) * (1 - exp(-compute_ubo.timeDelta * TAU)); 
    imageStore(ColourSampler, ivec2(0, 0), vec4(adaptedLum, 0.0, 0.0, 0.0));
  }
}